// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DNDMapper.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DNDMapper_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DNDMapper_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DNDMapper_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DNDMapper_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DNDMapper_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_DNDMapper_2eproto_metadata_getter(int index);
namespace DNDProto {
class Map;
struct MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class NetworkMessage;
struct NetworkMessageDefaultTypeInternal;
extern NetworkMessageDefaultTypeInternal _NetworkMessage_default_instance_;
class TileUpdate;
struct TileUpdateDefaultTypeInternal;
extern TileUpdateDefaultTypeInternal _TileUpdate_default_instance_;
class Token;
struct TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace DNDProto
PROTOBUF_NAMESPACE_OPEN
template<> ::DNDProto::Map* Arena::CreateMaybeMessage<::DNDProto::Map>(Arena*);
template<> ::DNDProto::NetworkMessage* Arena::CreateMaybeMessage<::DNDProto::NetworkMessage>(Arena*);
template<> ::DNDProto::TileUpdate* Arena::CreateMaybeMessage<::DNDProto::TileUpdate>(Arena*);
template<> ::DNDProto::Token* Arena::CreateMaybeMessage<::DNDProto::Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DNDProto {

enum NetworkMessage_ErrorType : int {
  NetworkMessage_ErrorType_GameDoesNotExistError = 1
};
bool NetworkMessage_ErrorType_IsValid(int value);
constexpr NetworkMessage_ErrorType NetworkMessage_ErrorType_ErrorType_MIN = NetworkMessage_ErrorType_GameDoesNotExistError;
constexpr NetworkMessage_ErrorType NetworkMessage_ErrorType_ErrorType_MAX = NetworkMessage_ErrorType_GameDoesNotExistError;
constexpr int NetworkMessage_ErrorType_ErrorType_ARRAYSIZE = NetworkMessage_ErrorType_ErrorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkMessage_ErrorType_descriptor();
template<typename T>
inline const std::string& NetworkMessage_ErrorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkMessage_ErrorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkMessage_ErrorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkMessage_ErrorType_descriptor(), enum_t_value);
}
inline bool NetworkMessage_ErrorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkMessage_ErrorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkMessage_ErrorType>(
    NetworkMessage_ErrorType_descriptor(), name, value);
}
enum NetworkMessage_MessageType : int {
  NetworkMessage_MessageType_CreateGame = 1,
  NetworkMessage_MessageType_JoinGame = 2,
  NetworkMessage_MessageType_Update = 3,
  NetworkMessage_MessageType_ID = 4,
  NetworkMessage_MessageType_Error = 5
};
bool NetworkMessage_MessageType_IsValid(int value);
constexpr NetworkMessage_MessageType NetworkMessage_MessageType_MessageType_MIN = NetworkMessage_MessageType_CreateGame;
constexpr NetworkMessage_MessageType NetworkMessage_MessageType_MessageType_MAX = NetworkMessage_MessageType_Error;
constexpr int NetworkMessage_MessageType_MessageType_ARRAYSIZE = NetworkMessage_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkMessage_MessageType_descriptor();
template<typename T>
inline const std::string& NetworkMessage_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkMessage_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkMessage_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkMessage_MessageType_descriptor(), enum_t_value);
}
inline bool NetworkMessage_MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetworkMessage_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkMessage_MessageType>(
    NetworkMessage_MessageType_descriptor(), name, value);
}
// ===================================================================

class Token PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DNDProto.Token) */ {
 public:
  inline Token() : Token(nullptr) {}
  virtual ~Token();
  explicit constexpr Token(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Token* New() const final {
    return CreateMaybeMessage<Token>(nullptr);
  }

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DNDProto.Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DNDMapper_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
    kPosXFieldNumber = 3,
    kPosYFieldNumber = 4,
    kIdFieldNumber = 5,
    kIsDestroyFieldNumber = 6,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float posX = 3;
  bool has_posx() const;
  private:
  bool _internal_has_posx() const;
  public:
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // optional float posY = 4;
  bool has_posy() const;
  private:
  bool _internal_has_posy() const;
  public:
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // required int32 id = 5;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool isDestroy = 6;
  bool has_isdestroy() const;
  private:
  bool _internal_has_isdestroy() const;
  public:
  void clear_isdestroy();
  bool isdestroy() const;
  void set_isdestroy(bool value);
  private:
  bool _internal_isdestroy() const;
  void _internal_set_isdestroy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DNDProto.Token)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  float posx_;
  float posy_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool isdestroy_;
  friend struct ::TableStruct_DNDMapper_2eproto;
};
// -------------------------------------------------------------------

class Map PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DNDProto.Map) */ {
 public:
  inline Map() : Map(nullptr) {}
  virtual ~Map();
  explicit constexpr Map(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map& default_instance() {
    return *internal_default_instance();
  }
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const final {
    return CreateMaybeMessage<Map>(nullptr);
  }

  Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DNDProto.Map";
  }
  protected:
  explicit Map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DNDMapper_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 3,
    kFoggedFieldNumber = 4,
    kTokensFieldNumber = 5,
    kSizeXFieldNumber = 1,
    kSizeYFieldNumber = 2,
  };
  // repeated int32 tiles = 3;
  int tiles_size() const;
  private:
  int _internal_tiles_size() const;
  public:
  void clear_tiles();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tiles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_tiles() const;
  void _internal_add_tiles(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_tiles();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 tiles(int index) const;
  void set_tiles(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_tiles(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      tiles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_tiles();

  // repeated bool fogged = 4;
  int fogged_size() const;
  private:
  int _internal_fogged_size() const;
  public:
  void clear_fogged();
  private:
  bool _internal_fogged(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_fogged() const;
  void _internal_add_fogged(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_fogged();
  public:
  bool fogged(int index) const;
  void set_fogged(int index, bool value);
  void add_fogged(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      fogged() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_fogged();

  // repeated .DNDProto.Token tokens = 5;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  ::DNDProto::Token* mutable_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DNDProto::Token >*
      mutable_tokens();
  private:
  const ::DNDProto::Token& _internal_tokens(int index) const;
  ::DNDProto::Token* _internal_add_tokens();
  public:
  const ::DNDProto::Token& tokens(int index) const;
  ::DNDProto::Token* add_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DNDProto::Token >&
      tokens() const;

  // required int32 sizeX = 1;
  bool has_sizex() const;
  private:
  bool _internal_has_sizex() const;
  public:
  void clear_sizex();
  ::PROTOBUF_NAMESPACE_ID::int32 sizex() const;
  void set_sizex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sizex() const;
  void _internal_set_sizex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 sizeY = 2;
  bool has_sizey() const;
  private:
  bool _internal_has_sizey() const;
  public:
  void clear_sizey();
  ::PROTOBUF_NAMESPACE_ID::int32 sizey() const;
  void set_sizey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sizey() const;
  void _internal_set_sizey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DNDProto.Map)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > tiles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > fogged_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DNDProto::Token > tokens_;
  ::PROTOBUF_NAMESPACE_ID::int32 sizex_;
  ::PROTOBUF_NAMESPACE_ID::int32 sizey_;
  friend struct ::TableStruct_DNDMapper_2eproto;
};
// -------------------------------------------------------------------

class TileUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DNDProto.TileUpdate) */ {
 public:
  inline TileUpdate() : TileUpdate(nullptr) {}
  virtual ~TileUpdate();
  explicit constexpr TileUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TileUpdate(const TileUpdate& from);
  TileUpdate(TileUpdate&& from) noexcept
    : TileUpdate() {
    *this = ::std::move(from);
  }

  inline TileUpdate& operator=(const TileUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileUpdate& operator=(TileUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TileUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TileUpdate* internal_default_instance() {
    return reinterpret_cast<const TileUpdate*>(
               &_TileUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TileUpdate& a, TileUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TileUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TileUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileUpdate* New() const final {
    return CreateMaybeMessage<TileUpdate>(nullptr);
  }

  TileUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TileUpdate& from);
  void MergeFrom(const TileUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TileUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DNDProto.TileUpdate";
  }
  protected:
  explicit TileUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DNDMapper_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kNewColorFieldNumber = 3,
    kNewFoggedFieldNumber = 4,
  };
  // required int32 posX = 1;
  bool has_posx() const;
  private:
  bool _internal_has_posx() const;
  public:
  void clear_posx();
  ::PROTOBUF_NAMESPACE_ID::int32 posx() const;
  void set_posx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_posx() const;
  void _internal_set_posx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 posY = 2;
  bool has_posy() const;
  private:
  bool _internal_has_posy() const;
  public:
  void clear_posy();
  ::PROTOBUF_NAMESPACE_ID::int32 posy() const;
  void set_posy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_posy() const;
  void _internal_set_posy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 newColor = 3;
  bool has_newcolor() const;
  private:
  bool _internal_has_newcolor() const;
  public:
  void clear_newcolor();
  ::PROTOBUF_NAMESPACE_ID::int32 newcolor() const;
  void set_newcolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_newcolor() const;
  void _internal_set_newcolor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool newFogged = 4;
  bool has_newfogged() const;
  private:
  bool _internal_has_newfogged() const;
  public:
  void clear_newfogged();
  bool newfogged() const;
  void set_newfogged(bool value);
  private:
  bool _internal_newfogged() const;
  void _internal_set_newfogged(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DNDProto.TileUpdate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 posx_;
  ::PROTOBUF_NAMESPACE_ID::int32 posy_;
  ::PROTOBUF_NAMESPACE_ID::int32 newcolor_;
  bool newfogged_;
  friend struct ::TableStruct_DNDMapper_2eproto;
};
// -------------------------------------------------------------------

class NetworkMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DNDProto.NetworkMessage) */ {
 public:
  inline NetworkMessage() : NetworkMessage(nullptr) {}
  virtual ~NetworkMessage();
  explicit constexpr NetworkMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkMessage(const NetworkMessage& from);
  NetworkMessage(NetworkMessage&& from) noexcept
    : NetworkMessage() {
    *this = ::std::move(from);
  }

  inline NetworkMessage& operator=(const NetworkMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkMessage& operator=(NetworkMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkMessage* internal_default_instance() {
    return reinterpret_cast<const NetworkMessage*>(
               &_NetworkMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NetworkMessage& a, NetworkMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkMessage* New() const final {
    return CreateMaybeMessage<NetworkMessage>(nullptr);
  }

  NetworkMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkMessage& from);
  void MergeFrom(const NetworkMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DNDProto.NetworkMessage";
  }
  protected:
  explicit NetworkMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DNDMapper_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef NetworkMessage_ErrorType ErrorType;
  static constexpr ErrorType GameDoesNotExistError =
    NetworkMessage_ErrorType_GameDoesNotExistError;
  static inline bool ErrorType_IsValid(int value) {
    return NetworkMessage_ErrorType_IsValid(value);
  }
  static constexpr ErrorType ErrorType_MIN =
    NetworkMessage_ErrorType_ErrorType_MIN;
  static constexpr ErrorType ErrorType_MAX =
    NetworkMessage_ErrorType_ErrorType_MAX;
  static constexpr int ErrorType_ARRAYSIZE =
    NetworkMessage_ErrorType_ErrorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorType_descriptor() {
    return NetworkMessage_ErrorType_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorType_Name.");
    return NetworkMessage_ErrorType_Name(enum_t_value);
  }
  static inline bool ErrorType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorType* value) {
    return NetworkMessage_ErrorType_Parse(name, value);
  }

  typedef NetworkMessage_MessageType MessageType;
  static constexpr MessageType CreateGame =
    NetworkMessage_MessageType_CreateGame;
  static constexpr MessageType JoinGame =
    NetworkMessage_MessageType_JoinGame;
  static constexpr MessageType Update =
    NetworkMessage_MessageType_Update;
  static constexpr MessageType ID =
    NetworkMessage_MessageType_ID;
  static constexpr MessageType Error =
    NetworkMessage_MessageType_Error;
  static inline bool MessageType_IsValid(int value) {
    return NetworkMessage_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    NetworkMessage_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    NetworkMessage_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    NetworkMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return NetworkMessage_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return NetworkMessage_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MessageType* value) {
    return NetworkMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 2,
    kTileUpdateFieldNumber = 3,
    kTokenUpdateFieldNumber = 5,
    kGameIDFieldNumber = 4,
    kMessageTypeFieldNumber = 1,
    kErrorFieldNumber = 6,
  };
  // optional .DNDProto.Map map = 2;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::DNDProto::Map& map() const;
  ::DNDProto::Map* release_map();
  ::DNDProto::Map* mutable_map();
  void set_allocated_map(::DNDProto::Map* map);
  private:
  const ::DNDProto::Map& _internal_map() const;
  ::DNDProto::Map* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::DNDProto::Map* map);
  ::DNDProto::Map* unsafe_arena_release_map();

  // optional .DNDProto.TileUpdate tileUpdate = 3;
  bool has_tileupdate() const;
  private:
  bool _internal_has_tileupdate() const;
  public:
  void clear_tileupdate();
  const ::DNDProto::TileUpdate& tileupdate() const;
  ::DNDProto::TileUpdate* release_tileupdate();
  ::DNDProto::TileUpdate* mutable_tileupdate();
  void set_allocated_tileupdate(::DNDProto::TileUpdate* tileupdate);
  private:
  const ::DNDProto::TileUpdate& _internal_tileupdate() const;
  ::DNDProto::TileUpdate* _internal_mutable_tileupdate();
  public:
  void unsafe_arena_set_allocated_tileupdate(
      ::DNDProto::TileUpdate* tileupdate);
  ::DNDProto::TileUpdate* unsafe_arena_release_tileupdate();

  // optional .DNDProto.Token tokenUpdate = 5;
  bool has_tokenupdate() const;
  private:
  bool _internal_has_tokenupdate() const;
  public:
  void clear_tokenupdate();
  const ::DNDProto::Token& tokenupdate() const;
  ::DNDProto::Token* release_tokenupdate();
  ::DNDProto::Token* mutable_tokenupdate();
  void set_allocated_tokenupdate(::DNDProto::Token* tokenupdate);
  private:
  const ::DNDProto::Token& _internal_tokenupdate() const;
  ::DNDProto::Token* _internal_mutable_tokenupdate();
  public:
  void unsafe_arena_set_allocated_tokenupdate(
      ::DNDProto::Token* tokenupdate);
  ::DNDProto::Token* unsafe_arena_release_tokenupdate();

  // optional int32 gameID = 4;
  bool has_gameid() const;
  private:
  bool _internal_has_gameid() const;
  public:
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .DNDProto.NetworkMessage.MessageType messageType = 1;
  bool has_messagetype() const;
  private:
  bool _internal_has_messagetype() const;
  public:
  void clear_messagetype();
  ::DNDProto::NetworkMessage_MessageType messagetype() const;
  void set_messagetype(::DNDProto::NetworkMessage_MessageType value);
  private:
  ::DNDProto::NetworkMessage_MessageType _internal_messagetype() const;
  void _internal_set_messagetype(::DNDProto::NetworkMessage_MessageType value);
  public:

  // optional .DNDProto.NetworkMessage.ErrorType error = 6;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::DNDProto::NetworkMessage_ErrorType error() const;
  void set_error(::DNDProto::NetworkMessage_ErrorType value);
  private:
  ::DNDProto::NetworkMessage_ErrorType _internal_error() const;
  void _internal_set_error(::DNDProto::NetworkMessage_ErrorType value);
  public:

  // @@protoc_insertion_point(class_scope:DNDProto.NetworkMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::DNDProto::Map* map_;
  ::DNDProto::TileUpdate* tileupdate_;
  ::DNDProto::Token* tokenupdate_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  int messagetype_;
  int error_;
  friend struct ::TableStruct_DNDMapper_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Token

// optional string name = 1;
inline bool Token::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Token::has_name() const {
  return _internal_has_name();
}
inline void Token::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Token::name() const {
  // @@protoc_insertion_point(field_get:DNDProto.Token.name)
  return _internal_name();
}
inline void Token::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DNDProto.Token.name)
}
inline std::string* Token::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DNDProto.Token.name)
  return _internal_mutable_name();
}
inline const std::string& Token::_internal_name() const {
  return name_.Get();
}
inline void Token::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Token::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DNDProto.Token.name)
}
inline void Token::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DNDProto.Token.name)
}
inline void Token::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DNDProto.Token.name)
}
inline std::string* Token::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Token::release_name() {
  // @@protoc_insertion_point(field_release:DNDProto.Token.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Token::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DNDProto.Token.name)
}

// optional int32 color = 2;
inline bool Token::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Token::has_color() const {
  return _internal_has_color();
}
inline void Token::clear_color() {
  color_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::color() const {
  // @@protoc_insertion_point(field_get:DNDProto.Token.color)
  return _internal_color();
}
inline void Token::_internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  color_ = value;
}
inline void Token::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:DNDProto.Token.color)
}

// optional float posX = 3;
inline bool Token::_internal_has_posx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Token::has_posx() const {
  return _internal_has_posx();
}
inline void Token::clear_posx() {
  posx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Token::_internal_posx() const {
  return posx_;
}
inline float Token::posx() const {
  // @@protoc_insertion_point(field_get:DNDProto.Token.posX)
  return _internal_posx();
}
inline void Token::_internal_set_posx(float value) {
  _has_bits_[0] |= 0x00000004u;
  posx_ = value;
}
inline void Token::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:DNDProto.Token.posX)
}

// optional float posY = 4;
inline bool Token::_internal_has_posy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Token::has_posy() const {
  return _internal_has_posy();
}
inline void Token::clear_posy() {
  posy_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Token::_internal_posy() const {
  return posy_;
}
inline float Token::posy() const {
  // @@protoc_insertion_point(field_get:DNDProto.Token.posY)
  return _internal_posy();
}
inline void Token::_internal_set_posy(float value) {
  _has_bits_[0] |= 0x00000008u;
  posy_ = value;
}
inline void Token::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:DNDProto.Token.posY)
}

// required int32 id = 5;
inline bool Token::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Token::has_id() const {
  return _internal_has_id();
}
inline void Token::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::id() const {
  // @@protoc_insertion_point(field_get:DNDProto.Token.id)
  return _internal_id();
}
inline void Token::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void Token::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DNDProto.Token.id)
}

// optional bool isDestroy = 6;
inline bool Token::_internal_has_isdestroy() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Token::has_isdestroy() const {
  return _internal_has_isdestroy();
}
inline void Token::clear_isdestroy() {
  isdestroy_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Token::_internal_isdestroy() const {
  return isdestroy_;
}
inline bool Token::isdestroy() const {
  // @@protoc_insertion_point(field_get:DNDProto.Token.isDestroy)
  return _internal_isdestroy();
}
inline void Token::_internal_set_isdestroy(bool value) {
  _has_bits_[0] |= 0x00000020u;
  isdestroy_ = value;
}
inline void Token::set_isdestroy(bool value) {
  _internal_set_isdestroy(value);
  // @@protoc_insertion_point(field_set:DNDProto.Token.isDestroy)
}

// -------------------------------------------------------------------

// Map

// required int32 sizeX = 1;
inline bool Map::_internal_has_sizex() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Map::has_sizex() const {
  return _internal_has_sizex();
}
inline void Map::clear_sizex() {
  sizex_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::_internal_sizex() const {
  return sizex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::sizex() const {
  // @@protoc_insertion_point(field_get:DNDProto.Map.sizeX)
  return _internal_sizex();
}
inline void Map::_internal_set_sizex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sizex_ = value;
}
inline void Map::set_sizex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sizex(value);
  // @@protoc_insertion_point(field_set:DNDProto.Map.sizeX)
}

// required int32 sizeY = 2;
inline bool Map::_internal_has_sizey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Map::has_sizey() const {
  return _internal_has_sizey();
}
inline void Map::clear_sizey() {
  sizey_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::_internal_sizey() const {
  return sizey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::sizey() const {
  // @@protoc_insertion_point(field_get:DNDProto.Map.sizeY)
  return _internal_sizey();
}
inline void Map::_internal_set_sizey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  sizey_ = value;
}
inline void Map::set_sizey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sizey(value);
  // @@protoc_insertion_point(field_set:DNDProto.Map.sizeY)
}

// repeated int32 tiles = 3;
inline int Map::_internal_tiles_size() const {
  return tiles_.size();
}
inline int Map::tiles_size() const {
  return _internal_tiles_size();
}
inline void Map::clear_tiles() {
  tiles_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::_internal_tiles(int index) const {
  return tiles_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::tiles(int index) const {
  // @@protoc_insertion_point(field_get:DNDProto.Map.tiles)
  return _internal_tiles(index);
}
inline void Map::set_tiles(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  tiles_.Set(index, value);
  // @@protoc_insertion_point(field_set:DNDProto.Map.tiles)
}
inline void Map::_internal_add_tiles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  tiles_.Add(value);
}
inline void Map::add_tiles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_tiles(value);
  // @@protoc_insertion_point(field_add:DNDProto.Map.tiles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Map::_internal_tiles() const {
  return tiles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Map::tiles() const {
  // @@protoc_insertion_point(field_list:DNDProto.Map.tiles)
  return _internal_tiles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Map::_internal_mutable_tiles() {
  return &tiles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Map::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:DNDProto.Map.tiles)
  return _internal_mutable_tiles();
}

// repeated bool fogged = 4;
inline int Map::_internal_fogged_size() const {
  return fogged_.size();
}
inline int Map::fogged_size() const {
  return _internal_fogged_size();
}
inline void Map::clear_fogged() {
  fogged_.Clear();
}
inline bool Map::_internal_fogged(int index) const {
  return fogged_.Get(index);
}
inline bool Map::fogged(int index) const {
  // @@protoc_insertion_point(field_get:DNDProto.Map.fogged)
  return _internal_fogged(index);
}
inline void Map::set_fogged(int index, bool value) {
  fogged_.Set(index, value);
  // @@protoc_insertion_point(field_set:DNDProto.Map.fogged)
}
inline void Map::_internal_add_fogged(bool value) {
  fogged_.Add(value);
}
inline void Map::add_fogged(bool value) {
  _internal_add_fogged(value);
  // @@protoc_insertion_point(field_add:DNDProto.Map.fogged)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Map::_internal_fogged() const {
  return fogged_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Map::fogged() const {
  // @@protoc_insertion_point(field_list:DNDProto.Map.fogged)
  return _internal_fogged();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Map::_internal_mutable_fogged() {
  return &fogged_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Map::mutable_fogged() {
  // @@protoc_insertion_point(field_mutable_list:DNDProto.Map.fogged)
  return _internal_mutable_fogged();
}

// repeated .DNDProto.Token tokens = 5;
inline int Map::_internal_tokens_size() const {
  return tokens_.size();
}
inline int Map::tokens_size() const {
  return _internal_tokens_size();
}
inline void Map::clear_tokens() {
  tokens_.Clear();
}
inline ::DNDProto::Token* Map::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:DNDProto.Map.tokens)
  return tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DNDProto::Token >*
Map::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:DNDProto.Map.tokens)
  return &tokens_;
}
inline const ::DNDProto::Token& Map::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const ::DNDProto::Token& Map::tokens(int index) const {
  // @@protoc_insertion_point(field_get:DNDProto.Map.tokens)
  return _internal_tokens(index);
}
inline ::DNDProto::Token* Map::_internal_add_tokens() {
  return tokens_.Add();
}
inline ::DNDProto::Token* Map::add_tokens() {
  // @@protoc_insertion_point(field_add:DNDProto.Map.tokens)
  return _internal_add_tokens();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DNDProto::Token >&
Map::tokens() const {
  // @@protoc_insertion_point(field_list:DNDProto.Map.tokens)
  return tokens_;
}

// -------------------------------------------------------------------

// TileUpdate

// required int32 posX = 1;
inline bool TileUpdate::_internal_has_posx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TileUpdate::has_posx() const {
  return _internal_has_posx();
}
inline void TileUpdate::clear_posx() {
  posx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileUpdate::_internal_posx() const {
  return posx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileUpdate::posx() const {
  // @@protoc_insertion_point(field_get:DNDProto.TileUpdate.posX)
  return _internal_posx();
}
inline void TileUpdate::_internal_set_posx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  posx_ = value;
}
inline void TileUpdate::set_posx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:DNDProto.TileUpdate.posX)
}

// required int32 posY = 2;
inline bool TileUpdate::_internal_has_posy() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TileUpdate::has_posy() const {
  return _internal_has_posy();
}
inline void TileUpdate::clear_posy() {
  posy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileUpdate::_internal_posy() const {
  return posy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileUpdate::posy() const {
  // @@protoc_insertion_point(field_get:DNDProto.TileUpdate.posY)
  return _internal_posy();
}
inline void TileUpdate::_internal_set_posy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  posy_ = value;
}
inline void TileUpdate::set_posy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:DNDProto.TileUpdate.posY)
}

// optional int32 newColor = 3;
inline bool TileUpdate::_internal_has_newcolor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TileUpdate::has_newcolor() const {
  return _internal_has_newcolor();
}
inline void TileUpdate::clear_newcolor() {
  newcolor_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileUpdate::_internal_newcolor() const {
  return newcolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TileUpdate::newcolor() const {
  // @@protoc_insertion_point(field_get:DNDProto.TileUpdate.newColor)
  return _internal_newcolor();
}
inline void TileUpdate::_internal_set_newcolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  newcolor_ = value;
}
inline void TileUpdate::set_newcolor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_newcolor(value);
  // @@protoc_insertion_point(field_set:DNDProto.TileUpdate.newColor)
}

// optional bool newFogged = 4;
inline bool TileUpdate::_internal_has_newfogged() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TileUpdate::has_newfogged() const {
  return _internal_has_newfogged();
}
inline void TileUpdate::clear_newfogged() {
  newfogged_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TileUpdate::_internal_newfogged() const {
  return newfogged_;
}
inline bool TileUpdate::newfogged() const {
  // @@protoc_insertion_point(field_get:DNDProto.TileUpdate.newFogged)
  return _internal_newfogged();
}
inline void TileUpdate::_internal_set_newfogged(bool value) {
  _has_bits_[0] |= 0x00000008u;
  newfogged_ = value;
}
inline void TileUpdate::set_newfogged(bool value) {
  _internal_set_newfogged(value);
  // @@protoc_insertion_point(field_set:DNDProto.TileUpdate.newFogged)
}

// -------------------------------------------------------------------

// NetworkMessage

// required .DNDProto.NetworkMessage.MessageType messageType = 1;
inline bool NetworkMessage::_internal_has_messagetype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NetworkMessage::has_messagetype() const {
  return _internal_has_messagetype();
}
inline void NetworkMessage::clear_messagetype() {
  messagetype_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::DNDProto::NetworkMessage_MessageType NetworkMessage::_internal_messagetype() const {
  return static_cast< ::DNDProto::NetworkMessage_MessageType >(messagetype_);
}
inline ::DNDProto::NetworkMessage_MessageType NetworkMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:DNDProto.NetworkMessage.messageType)
  return _internal_messagetype();
}
inline void NetworkMessage::_internal_set_messagetype(::DNDProto::NetworkMessage_MessageType value) {
  assert(::DNDProto::NetworkMessage_MessageType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  messagetype_ = value;
}
inline void NetworkMessage::set_messagetype(::DNDProto::NetworkMessage_MessageType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:DNDProto.NetworkMessage.messageType)
}

// optional .DNDProto.Map map = 2;
inline bool NetworkMessage::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || map_ != nullptr);
  return value;
}
inline bool NetworkMessage::has_map() const {
  return _internal_has_map();
}
inline void NetworkMessage::clear_map() {
  if (map_ != nullptr) map_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::DNDProto::Map& NetworkMessage::_internal_map() const {
  const ::DNDProto::Map* p = map_;
  return p != nullptr ? *p : reinterpret_cast<const ::DNDProto::Map&>(
      ::DNDProto::_Map_default_instance_);
}
inline const ::DNDProto::Map& NetworkMessage::map() const {
  // @@protoc_insertion_point(field_get:DNDProto.NetworkMessage.map)
  return _internal_map();
}
inline void NetworkMessage::unsafe_arena_set_allocated_map(
    ::DNDProto::Map* map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_);
  }
  map_ = map;
  if (map) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DNDProto.NetworkMessage.map)
}
inline ::DNDProto::Map* NetworkMessage::release_map() {
  _has_bits_[0] &= ~0x00000001u;
  ::DNDProto::Map* temp = map_;
  map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DNDProto::Map* NetworkMessage::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_release:DNDProto.NetworkMessage.map)
  _has_bits_[0] &= ~0x00000001u;
  ::DNDProto::Map* temp = map_;
  map_ = nullptr;
  return temp;
}
inline ::DNDProto::Map* NetworkMessage::_internal_mutable_map() {
  _has_bits_[0] |= 0x00000001u;
  if (map_ == nullptr) {
    auto* p = CreateMaybeMessage<::DNDProto::Map>(GetArena());
    map_ = p;
  }
  return map_;
}
inline ::DNDProto::Map* NetworkMessage::mutable_map() {
  // @@protoc_insertion_point(field_mutable:DNDProto.NetworkMessage.map)
  return _internal_mutable_map();
}
inline void NetworkMessage::set_allocated_map(::DNDProto::Map* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:DNDProto.NetworkMessage.map)
}

// optional .DNDProto.TileUpdate tileUpdate = 3;
inline bool NetworkMessage::_internal_has_tileupdate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tileupdate_ != nullptr);
  return value;
}
inline bool NetworkMessage::has_tileupdate() const {
  return _internal_has_tileupdate();
}
inline void NetworkMessage::clear_tileupdate() {
  if (tileupdate_ != nullptr) tileupdate_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::DNDProto::TileUpdate& NetworkMessage::_internal_tileupdate() const {
  const ::DNDProto::TileUpdate* p = tileupdate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DNDProto::TileUpdate&>(
      ::DNDProto::_TileUpdate_default_instance_);
}
inline const ::DNDProto::TileUpdate& NetworkMessage::tileupdate() const {
  // @@protoc_insertion_point(field_get:DNDProto.NetworkMessage.tileUpdate)
  return _internal_tileupdate();
}
inline void NetworkMessage::unsafe_arena_set_allocated_tileupdate(
    ::DNDProto::TileUpdate* tileupdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tileupdate_);
  }
  tileupdate_ = tileupdate;
  if (tileupdate) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DNDProto.NetworkMessage.tileUpdate)
}
inline ::DNDProto::TileUpdate* NetworkMessage::release_tileupdate() {
  _has_bits_[0] &= ~0x00000002u;
  ::DNDProto::TileUpdate* temp = tileupdate_;
  tileupdate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DNDProto::TileUpdate* NetworkMessage::unsafe_arena_release_tileupdate() {
  // @@protoc_insertion_point(field_release:DNDProto.NetworkMessage.tileUpdate)
  _has_bits_[0] &= ~0x00000002u;
  ::DNDProto::TileUpdate* temp = tileupdate_;
  tileupdate_ = nullptr;
  return temp;
}
inline ::DNDProto::TileUpdate* NetworkMessage::_internal_mutable_tileupdate() {
  _has_bits_[0] |= 0x00000002u;
  if (tileupdate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DNDProto::TileUpdate>(GetArena());
    tileupdate_ = p;
  }
  return tileupdate_;
}
inline ::DNDProto::TileUpdate* NetworkMessage::mutable_tileupdate() {
  // @@protoc_insertion_point(field_mutable:DNDProto.NetworkMessage.tileUpdate)
  return _internal_mutable_tileupdate();
}
inline void NetworkMessage::set_allocated_tileupdate(::DNDProto::TileUpdate* tileupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tileupdate_;
  }
  if (tileupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tileupdate);
    if (message_arena != submessage_arena) {
      tileupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tileupdate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tileupdate_ = tileupdate;
  // @@protoc_insertion_point(field_set_allocated:DNDProto.NetworkMessage.tileUpdate)
}

// optional int32 gameID = 4;
inline bool NetworkMessage::_internal_has_gameid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetworkMessage::has_gameid() const {
  return _internal_has_gameid();
}
inline void NetworkMessage::clear_gameid() {
  gameid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkMessage::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkMessage::gameid() const {
  // @@protoc_insertion_point(field_get:DNDProto.NetworkMessage.gameID)
  return _internal_gameid();
}
inline void NetworkMessage::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  gameid_ = value;
}
inline void NetworkMessage::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:DNDProto.NetworkMessage.gameID)
}

// optional .DNDProto.Token tokenUpdate = 5;
inline bool NetworkMessage::_internal_has_tokenupdate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tokenupdate_ != nullptr);
  return value;
}
inline bool NetworkMessage::has_tokenupdate() const {
  return _internal_has_tokenupdate();
}
inline void NetworkMessage::clear_tokenupdate() {
  if (tokenupdate_ != nullptr) tokenupdate_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::DNDProto::Token& NetworkMessage::_internal_tokenupdate() const {
  const ::DNDProto::Token* p = tokenupdate_;
  return p != nullptr ? *p : reinterpret_cast<const ::DNDProto::Token&>(
      ::DNDProto::_Token_default_instance_);
}
inline const ::DNDProto::Token& NetworkMessage::tokenupdate() const {
  // @@protoc_insertion_point(field_get:DNDProto.NetworkMessage.tokenUpdate)
  return _internal_tokenupdate();
}
inline void NetworkMessage::unsafe_arena_set_allocated_tokenupdate(
    ::DNDProto::Token* tokenupdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tokenupdate_);
  }
  tokenupdate_ = tokenupdate;
  if (tokenupdate) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DNDProto.NetworkMessage.tokenUpdate)
}
inline ::DNDProto::Token* NetworkMessage::release_tokenupdate() {
  _has_bits_[0] &= ~0x00000004u;
  ::DNDProto::Token* temp = tokenupdate_;
  tokenupdate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DNDProto::Token* NetworkMessage::unsafe_arena_release_tokenupdate() {
  // @@protoc_insertion_point(field_release:DNDProto.NetworkMessage.tokenUpdate)
  _has_bits_[0] &= ~0x00000004u;
  ::DNDProto::Token* temp = tokenupdate_;
  tokenupdate_ = nullptr;
  return temp;
}
inline ::DNDProto::Token* NetworkMessage::_internal_mutable_tokenupdate() {
  _has_bits_[0] |= 0x00000004u;
  if (tokenupdate_ == nullptr) {
    auto* p = CreateMaybeMessage<::DNDProto::Token>(GetArena());
    tokenupdate_ = p;
  }
  return tokenupdate_;
}
inline ::DNDProto::Token* NetworkMessage::mutable_tokenupdate() {
  // @@protoc_insertion_point(field_mutable:DNDProto.NetworkMessage.tokenUpdate)
  return _internal_mutable_tokenupdate();
}
inline void NetworkMessage::set_allocated_tokenupdate(::DNDProto::Token* tokenupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tokenupdate_;
  }
  if (tokenupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tokenupdate);
    if (message_arena != submessage_arena) {
      tokenupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokenupdate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tokenupdate_ = tokenupdate;
  // @@protoc_insertion_point(field_set_allocated:DNDProto.NetworkMessage.tokenUpdate)
}

// optional .DNDProto.NetworkMessage.ErrorType error = 6;
inline bool NetworkMessage::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NetworkMessage::has_error() const {
  return _internal_has_error();
}
inline void NetworkMessage::clear_error() {
  error_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::DNDProto::NetworkMessage_ErrorType NetworkMessage::_internal_error() const {
  return static_cast< ::DNDProto::NetworkMessage_ErrorType >(error_);
}
inline ::DNDProto::NetworkMessage_ErrorType NetworkMessage::error() const {
  // @@protoc_insertion_point(field_get:DNDProto.NetworkMessage.error)
  return _internal_error();
}
inline void NetworkMessage::_internal_set_error(::DNDProto::NetworkMessage_ErrorType value) {
  assert(::DNDProto::NetworkMessage_ErrorType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  error_ = value;
}
inline void NetworkMessage::set_error(::DNDProto::NetworkMessage_ErrorType value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:DNDProto.NetworkMessage.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DNDProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DNDProto::NetworkMessage_ErrorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DNDProto::NetworkMessage_ErrorType>() {
  return ::DNDProto::NetworkMessage_ErrorType_descriptor();
}
template <> struct is_proto_enum< ::DNDProto::NetworkMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DNDProto::NetworkMessage_MessageType>() {
  return ::DNDProto::NetworkMessage_MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DNDMapper_2eproto
