// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DNDMapper.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DNDMapper_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DNDMapper_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DNDMapper_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DNDMapper_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DNDMapper_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_DNDMapper_2eproto_metadata_getter(int index);
namespace DNDProto {
class Map;
struct MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class Token;
struct TokenDefaultTypeInternal;
extern TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace DNDProto
PROTOBUF_NAMESPACE_OPEN
template<> ::DNDProto::Map* Arena::CreateMaybeMessage<::DNDProto::Map>(Arena*);
template<> ::DNDProto::Token* Arena::CreateMaybeMessage<::DNDProto::Token>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DNDProto {

// ===================================================================

class Token PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DNDProto.Token) */ {
 public:
  inline Token() : Token(nullptr) {}
  virtual ~Token();
  explicit constexpr Token(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Token(const Token& from);
  Token(Token&& from) noexcept
    : Token() {
    *this = ::std::move(from);
  }

  inline Token& operator=(const Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline Token& operator=(Token&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const Token* internal_default_instance() {
    return reinterpret_cast<const Token*>(
               &_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Token& a, Token& b) {
    a.Swap(&b);
  }
  inline void Swap(Token* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Token* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Token* New() const final {
    return CreateMaybeMessage<Token>(nullptr);
  }

  Token* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Token>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Token& from);
  void MergeFrom(const Token& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Token* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DNDProto.Token";
  }
  protected:
  explicit Token(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DNDMapper_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
    kPosXFieldNumber = 3,
    kPosYFieldNumber = 4,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float posX = 3;
  bool has_posx() const;
  private:
  bool _internal_has_posx() const;
  public:
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // required float posY = 4;
  bool has_posy() const;
  private:
  bool _internal_has_posy() const;
  public:
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // @@protoc_insertion_point(class_scope:DNDProto.Token)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  float posx_;
  float posy_;
  friend struct ::TableStruct_DNDMapper_2eproto;
};
// -------------------------------------------------------------------

class Map PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DNDProto.Map) */ {
 public:
  inline Map() : Map(nullptr) {}
  virtual ~Map();
  explicit constexpr Map(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Map& default_instance() {
    return *internal_default_instance();
  }
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const final {
    return CreateMaybeMessage<Map>(nullptr);
  }

  Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DNDProto.Map";
  }
  protected:
  explicit Map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_DNDMapper_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 3,
    kFoggedFieldNumber = 4,
    kTokensFieldNumber = 5,
    kSizeXFieldNumber = 1,
    kSizeYFieldNumber = 2,
  };
  // repeated int32 tiles = 3;
  int tiles_size() const;
  private:
  int _internal_tiles_size() const;
  public:
  void clear_tiles();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tiles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_tiles() const;
  void _internal_add_tiles(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_tiles();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 tiles(int index) const;
  void set_tiles(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_tiles(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      tiles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_tiles();

  // repeated bool fogged = 4;
  int fogged_size() const;
  private:
  int _internal_fogged_size() const;
  public:
  void clear_fogged();
  private:
  bool _internal_fogged(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_fogged() const;
  void _internal_add_fogged(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_fogged();
  public:
  bool fogged(int index) const;
  void set_fogged(int index, bool value);
  void add_fogged(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      fogged() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_fogged();

  // repeated .DNDProto.Token tokens = 5;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  ::DNDProto::Token* mutable_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DNDProto::Token >*
      mutable_tokens();
  private:
  const ::DNDProto::Token& _internal_tokens(int index) const;
  ::DNDProto::Token* _internal_add_tokens();
  public:
  const ::DNDProto::Token& tokens(int index) const;
  ::DNDProto::Token* add_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DNDProto::Token >&
      tokens() const;

  // required int32 sizeX = 1;
  bool has_sizex() const;
  private:
  bool _internal_has_sizex() const;
  public:
  void clear_sizex();
  ::PROTOBUF_NAMESPACE_ID::int32 sizex() const;
  void set_sizex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sizex() const;
  void _internal_set_sizex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 sizeY = 2;
  bool has_sizey() const;
  private:
  bool _internal_has_sizey() const;
  public:
  void clear_sizey();
  ::PROTOBUF_NAMESPACE_ID::int32 sizey() const;
  void set_sizey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sizey() const;
  void _internal_set_sizey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DNDProto.Map)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > tiles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > fogged_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DNDProto::Token > tokens_;
  ::PROTOBUF_NAMESPACE_ID::int32 sizex_;
  ::PROTOBUF_NAMESPACE_ID::int32 sizey_;
  friend struct ::TableStruct_DNDMapper_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Token

// required string name = 1;
inline bool Token::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Token::has_name() const {
  return _internal_has_name();
}
inline void Token::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Token::name() const {
  // @@protoc_insertion_point(field_get:DNDProto.Token.name)
  return _internal_name();
}
inline void Token::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DNDProto.Token.name)
}
inline std::string* Token::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DNDProto.Token.name)
  return _internal_mutable_name();
}
inline const std::string& Token::_internal_name() const {
  return name_.Get();
}
inline void Token::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Token::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DNDProto.Token.name)
}
inline void Token::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DNDProto.Token.name)
}
inline void Token::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DNDProto.Token.name)
}
inline std::string* Token::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Token::release_name() {
  // @@protoc_insertion_point(field_release:DNDProto.Token.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Token::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DNDProto.Token.name)
}

// required int32 color = 2;
inline bool Token::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Token::has_color() const {
  return _internal_has_color();
}
inline void Token::clear_color() {
  color_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Token::color() const {
  // @@protoc_insertion_point(field_get:DNDProto.Token.color)
  return _internal_color();
}
inline void Token::_internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  color_ = value;
}
inline void Token::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:DNDProto.Token.color)
}

// required float posX = 3;
inline bool Token::_internal_has_posx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Token::has_posx() const {
  return _internal_has_posx();
}
inline void Token::clear_posx() {
  posx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Token::_internal_posx() const {
  return posx_;
}
inline float Token::posx() const {
  // @@protoc_insertion_point(field_get:DNDProto.Token.posX)
  return _internal_posx();
}
inline void Token::_internal_set_posx(float value) {
  _has_bits_[0] |= 0x00000004u;
  posx_ = value;
}
inline void Token::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:DNDProto.Token.posX)
}

// required float posY = 4;
inline bool Token::_internal_has_posy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Token::has_posy() const {
  return _internal_has_posy();
}
inline void Token::clear_posy() {
  posy_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Token::_internal_posy() const {
  return posy_;
}
inline float Token::posy() const {
  // @@protoc_insertion_point(field_get:DNDProto.Token.posY)
  return _internal_posy();
}
inline void Token::_internal_set_posy(float value) {
  _has_bits_[0] |= 0x00000008u;
  posy_ = value;
}
inline void Token::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:DNDProto.Token.posY)
}

// -------------------------------------------------------------------

// Map

// required int32 sizeX = 1;
inline bool Map::_internal_has_sizex() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Map::has_sizex() const {
  return _internal_has_sizex();
}
inline void Map::clear_sizex() {
  sizex_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::_internal_sizex() const {
  return sizex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::sizex() const {
  // @@protoc_insertion_point(field_get:DNDProto.Map.sizeX)
  return _internal_sizex();
}
inline void Map::_internal_set_sizex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sizex_ = value;
}
inline void Map::set_sizex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sizex(value);
  // @@protoc_insertion_point(field_set:DNDProto.Map.sizeX)
}

// required int32 sizeY = 2;
inline bool Map::_internal_has_sizey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Map::has_sizey() const {
  return _internal_has_sizey();
}
inline void Map::clear_sizey() {
  sizey_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::_internal_sizey() const {
  return sizey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::sizey() const {
  // @@protoc_insertion_point(field_get:DNDProto.Map.sizeY)
  return _internal_sizey();
}
inline void Map::_internal_set_sizey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  sizey_ = value;
}
inline void Map::set_sizey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sizey(value);
  // @@protoc_insertion_point(field_set:DNDProto.Map.sizeY)
}

// repeated int32 tiles = 3;
inline int Map::_internal_tiles_size() const {
  return tiles_.size();
}
inline int Map::tiles_size() const {
  return _internal_tiles_size();
}
inline void Map::clear_tiles() {
  tiles_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::_internal_tiles(int index) const {
  return tiles_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Map::tiles(int index) const {
  // @@protoc_insertion_point(field_get:DNDProto.Map.tiles)
  return _internal_tiles(index);
}
inline void Map::set_tiles(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  tiles_.Set(index, value);
  // @@protoc_insertion_point(field_set:DNDProto.Map.tiles)
}
inline void Map::_internal_add_tiles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  tiles_.Add(value);
}
inline void Map::add_tiles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_tiles(value);
  // @@protoc_insertion_point(field_add:DNDProto.Map.tiles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Map::_internal_tiles() const {
  return tiles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Map::tiles() const {
  // @@protoc_insertion_point(field_list:DNDProto.Map.tiles)
  return _internal_tiles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Map::_internal_mutable_tiles() {
  return &tiles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Map::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:DNDProto.Map.tiles)
  return _internal_mutable_tiles();
}

// repeated bool fogged = 4;
inline int Map::_internal_fogged_size() const {
  return fogged_.size();
}
inline int Map::fogged_size() const {
  return _internal_fogged_size();
}
inline void Map::clear_fogged() {
  fogged_.Clear();
}
inline bool Map::_internal_fogged(int index) const {
  return fogged_.Get(index);
}
inline bool Map::fogged(int index) const {
  // @@protoc_insertion_point(field_get:DNDProto.Map.fogged)
  return _internal_fogged(index);
}
inline void Map::set_fogged(int index, bool value) {
  fogged_.Set(index, value);
  // @@protoc_insertion_point(field_set:DNDProto.Map.fogged)
}
inline void Map::_internal_add_fogged(bool value) {
  fogged_.Add(value);
}
inline void Map::add_fogged(bool value) {
  _internal_add_fogged(value);
  // @@protoc_insertion_point(field_add:DNDProto.Map.fogged)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Map::_internal_fogged() const {
  return fogged_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Map::fogged() const {
  // @@protoc_insertion_point(field_list:DNDProto.Map.fogged)
  return _internal_fogged();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Map::_internal_mutable_fogged() {
  return &fogged_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Map::mutable_fogged() {
  // @@protoc_insertion_point(field_mutable_list:DNDProto.Map.fogged)
  return _internal_mutable_fogged();
}

// repeated .DNDProto.Token tokens = 5;
inline int Map::_internal_tokens_size() const {
  return tokens_.size();
}
inline int Map::tokens_size() const {
  return _internal_tokens_size();
}
inline void Map::clear_tokens() {
  tokens_.Clear();
}
inline ::DNDProto::Token* Map::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:DNDProto.Map.tokens)
  return tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DNDProto::Token >*
Map::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:DNDProto.Map.tokens)
  return &tokens_;
}
inline const ::DNDProto::Token& Map::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const ::DNDProto::Token& Map::tokens(int index) const {
  // @@protoc_insertion_point(field_get:DNDProto.Map.tokens)
  return _internal_tokens(index);
}
inline ::DNDProto::Token* Map::_internal_add_tokens() {
  return tokens_.Add();
}
inline ::DNDProto::Token* Map::add_tokens() {
  // @@protoc_insertion_point(field_add:DNDProto.Map.tokens)
  return _internal_add_tokens();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DNDProto::Token >&
Map::tokens() const {
  // @@protoc_insertion_point(field_list:DNDProto.Map.tokens)
  return tokens_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DNDProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DNDMapper_2eproto
